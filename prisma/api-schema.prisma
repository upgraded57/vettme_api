// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// All amount fields are integers in kobo i.e NGN100 === 100 * 100 kobo

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  output = "./generated/api-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_API_URL")
}

model Company {
  id              String  @id @default(uuid())
  email           String  @unique
  companyName     String
  companyId       String
  phone_number    String? @unique
  isActive        Boolean @default(false)
  isVerified      Boolean @default(false)
  password        String 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  balance         Int @default(0)
  applications    Application[]
  recentActivities RecentActivities[]
  transactions    Transaction[]
}

model Application {
    id          String @id @default(uuid())
    name        String
    company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade )
    companyId   String 
    public_key  String 
    private_key String 
    createdAt   DateTime @default(now())
    status      Boolean @default(true)
    logs        Log[]
    recentActivities  RecentActivities[]

    @@unique([id, name])
}

model Log {
    id                  String @id @default(uuid())
    application         Application @relation(fields: [applicationId, applicationName], references: [id, name], onDelete: Cascade, onUpdate: Cascade)
    applicationId       String 
    applicationName     String 
    service             String 
    createdAt           DateTime @default(now())
    statusCode          String
    environment         String
}

model RecentActivities {
  id              String @id @default(uuid())
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId       String
  application     Application @relation(fields: [applicationId, applicationName], references: [id, name], onDelete: Cascade, onUpdate: Cascade)
  applicationName String
  applicationId   String 
  environment     String 
  service         String 
  cost            String 
  date            DateTime @default(now())
  status          String 
}

model Transaction {
  id            String @id @default(uuid())
  reference     String @default("")
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId     String
  type          String
  amount        Int
  status        String 
  createdAt     DateTime @default(now())
}